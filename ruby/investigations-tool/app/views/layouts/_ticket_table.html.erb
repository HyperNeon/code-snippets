<% if data_array.present? %>
  <div id="ticket_table">
    <h2 style="text-align:center;"><%= title %></h2>
    <div ng-controller="CollapseCtrl">
      <button class="btn btn-default" ng-click="isCollapsed = !isCollapsed">View/Hide Table Help</button>
      <div collapse="isCollapsed" ng-init="isCollapsed = true" class="collapse" style="height: 0px;">
        <table class="tablesorter-blue notes">
          <thead>
          <tr>
            <th style="width:10%">Type <small class="bright">(1)(2)</small></th>
            <th style="width:40%">Description</th>
            <th style="width:50%">Examples</th>
          </tr>
          </thead>
          <tbody>
          <tr><td class="center">text</td><td>Any text entered in the filter will <strong>match</strong> text found within the column</td><td><code>abc</code> (finds &quot;abc&quot;, &quot;abcd&quot;, &quot;abcde&quot;, etc);<button data-filter-column="1">Aaron</button> (finds &quot;Aaron&quot; and &quot;Philip Aaron Wong&quot;)</td></tr>
          <tr><td class="center"><code>/\d/</code></td><td>Add any regex to the query to use in the query ("mig" flags can be included <code>/\w/mig</code>)</td><td><code>/b[aeiou]g/i</code> (finds &quot;bag&quot;, &quot;beg&quot;, &quot;BIG&quot;, &quot;Bug&quot;, etc);<button data-filter-column="1">/r$/</button> (matches text that ends with an &quot;r&quot;)</td></tr>
          <tr><td class="center"><code>&lt; &lt;= &gt;= &gt;</code></td><td>Find alphabetical or numerical values less than or greater than or equal to the filtered query <small class="bright">(2)</small>.</td><td><button data-filter-column="5">&gt;= 10</button> (find values greater than or equal to 10)</td></tr>
          <tr><td class="center"><code>!</code> or <code>!=</code></td><td>Not operator, or not exactly match. Filter the column with content that <strong>do not</strong> match the query. Include an equal (<code>=</code>), single (<code>'</code>) or double quote (<code>&quot;</code>) to exactly <em>not</em> match a filter (<span class="version">v2.17.1</span>).</td><td><code>!fe</code> (hide rows with &quot;female&quot; in that column, but shows rows with &quot;male&quot;);<button data-filter-column="1">!a</button> (find text that doesn't contain an &quot;a&quot;);<button data-filter-column="1">!"Bruce"</button> (find content that does not exactly match "Bruce")</td></tr>
          <tr><td class="center"><code>&quot;</code> or <code>=</code></td><td>To exactly match the search query, add a quote, apostrophe or equal sign to the beginning and/or end of the query</td><td><code>abc&quot;</code> or <code>abc=</code> (exactly match &quot;abc&quot;);<button data-filter-column="1">John&quot;</button> or <button data-filter-column="1">John=</button> (exactly match &quot;John&quot;)</td></tr>
          <tr><td class="center"><code>&nbsp;&&&nbsp;</code> or <code>&nbsp;AND&nbsp;</code></td><td>Logical &quot;and&quot;. Filter the column for content that matches text from either side of the operator.</td><td><code>box && bat</code> (matches a column cell that contains both &quot;box&quot; and &quot;bat&quot;);<button data-filter-column="1">Br && c</button> (Find text that contains both &quot;br&quot; and &quot;c&quot;)</td></tr>
          <tr><td class="center"><code>&nbsp;-&nbsp;</code> or <code>&nbsp;to&nbsp;</code></td><td>Find a range of values. Make sure there is a space before and after the dash (or the word &quot;to&quot;) <small class="bright">(4)</small>.</td><td><button data-filter-column="3">10 - 30</button> or <button data-filter-column="4">10 to 30</button> (match values between 10 and 30)</td></tr>
          <tr><td class="center"><code>?</code></td><td>Wildcard for a single, non-space character.</td><td><code>J?n</code> (finds &quot;Jan&quot; and &quot;Jun&quot;, but not &quot;Joan&quot;);<button data-filter-column="2">a?s</button> (finds &quot;Dumass&quot; and &quot;Evans&quot;, but not &quot;McMasters&quot;)</td></tr>
          <tr><td class="center"><code>*</code></td><td>Wildcard for zero or more non-space characters.</td><td><code>B*k</code> (matches &quot;Black&quot; and &quot;Book&quot;);<button data-filter-column="2">a*s</button> (matches &quot;Dumass&quot;, &quot;Evans&quot; and &quot;McMasters&quot;)</td></tr>
          <tr><td class="center"><code>|</code> or <code>&nbsp;OR&nbsp;</code></td><td>Logical &quot;or&quot; (Vertical bar). Filter the column for content that matches text from either side of the bar <small class="bright">(3)</small>.</td><td><code>box|bat</code> (matches a column cell with either &quot;box&quot; or &quot;bat&quot;);<button data-filter-column="1">Alex|Peter</button> (Find text that contains either &quot;Alex&quot; or &quot;Peter&quot;)</td></tr>
          <tr><td class="center"><code>~</code></td><td>Perform a fuzzy search (matches sequential characters) by adding a tilde to the beginning of the query (<span class="version">v2.13.3</span>)</td><td><button data-filter-column="1">~bee</button> (matches &quot;Bruce Lee&quot; and &quot;Brenda Dexter&quot;), or <button data-filter-column="1">~piano</button> (matches &quot;Philip Aaron Wong&quot;)</td></tr>
          </tbody>
        </table>
      </div>
    </div>

    <div id=<%="pager#{title.delete(' ')}"%> class="pager">
      <%= image_tag("first.png", id: "first")%>
      <%= image_tag("prev.png", id: "prev")%>
      <input type="text" class="pagedisplay"/>
      <%= image_tag("next.png", id: "next")%>
      <%= image_tag("last.png", id: "last")%>
      <select class="pagesize">
        <option value="5">5</option>
        <option value="10">10</option>
        <option selected="selected" value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
    </div>
    <table class="tablesorter" id=<%="result_table#{title.delete(' ')}"%>>
      <thead>
        <tr>
          <% data_array.first.keys.each do |column| %>
            <th nowrap><%= column %></th>
          <% end %>
        </tr>
      </thead>
      <tbody>
        <% data_array.each do |row| %>
          <% row_class = row[:flagged] ? 'flagged' : '' %>
          <tr <%= "class=#{row_class}" %> >
            <% row.values.each_with_index do |value, index| %>
              <% table_link_columns ||= [] %>
              <% if table_link_columns.include? index %>
                <% if value.class == Time %>
                  <%= link_to "#{l value, format: :it_dates}", issue_url(id: row.values[table_link_field]) %>
                <% else %>
                  <% if value.to_s.size >= 35 %>
                    <td ><%= link_to number_to_delimited(value), issue_url(id: row.values[table_link_field]) %></td>
                  <% else %>
                    <td nowrap ><%= link_to number_to_delimited(value), issue_url(id: row.values[table_link_field]) %></td>
                  <% end %>
                <% end %>
              <% else %>
                <% if value.class == Time %>
                  <td nowrap><%= l value, format: :it_dates %></td>
                <% else %>
                  <% if value.to_s.size >= 35 %>
                    <td ><%= number_to_delimited(value) %></td>
                  <% else %>
                    <td nowrap ><%= number_to_delimited(value) %></td>
                  <% end %>
                <% end %>
              <% end %>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
  <script type="text/javascript">

    $.tablesorter.addParser({
      id: "itDate",
      is: function (s) {
          return /\w{1,3} \d{1,2}, \d{1,4} \d{1,2}:\d{1,2}:\d{1,2} (\+|\-)\d{1,4}/.test(s);
      },
      format: function (s) {
          return Date.parse(s);
      },
      type: "numeric"
    });

    $(<%="result_table#{title.delete(' ')}"%>)
      .tablesorter({
        theme : "blue",
        widgets : [ "uitheme", "filter", "zebra" ]
      })
      
      // initialize the pager plugin
      // ****************************
      .tablesorterPager({
        // target the pager markup - see the HTML block below
        container: $("<%="#pager#{title.delete(' ')}"%>"),
        // output string - default is '{page}/{totalPages}'; possible variables: {page}, {totalPages}, {startRow}, {endRow} and {totalRows}
        output: '{startRow} - {endRow} / {filteredRows} ({totalRows})',
        // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
        // table row set to a height to compensate; default is false
        fixedHeight: false,
        // remove rows from the table to speed up the sort of large tables.
        // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
        removeRows: false,
        size: 25,
        // go to page selector - select dropdown that sets the current page
        cssGoto: '.gotoPage',
        cssNext: '#next',
        cssPrev: '#prev',
        cssFirst: '#first',
        cssLast: '#last',
        cssPageDisplay: '.pagedisplay'
      });
  </script>
<% else %>
  <div class='alert alert-danger' role='alert'> 
    <strong>No Results</strong>  The query appears to have run successfully, but no results were returned
  </div>
<% end %>
<% unless id.nil? %>
    <p class="bg-info">UUID: <%= id %></p>
<% end %>
